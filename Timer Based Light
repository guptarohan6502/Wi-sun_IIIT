import socket
import json
import requests
import schedule
import time 
UDP_IP =  "fd12:3456::5232:5fff:fe42:8a37"
UDP_IP1 = "fd12:3456::b6e3:f9ff:fea6:2e7"
UDP_IP2 = "fd12:3456::b6e3:f9ff:fea6:331"
UDP_IP3 = "fd12:3456::b6e3:f9ff:fea6:314"
UDP_PORT = 5001 # Port 
HOST_IP="fd12:3456::1"
PORT = 5005
def lights_on():
    while True:
        MESSAGE = ".allon"

        print ("UDP target IP:", UDP_IP) 
        print ("UDP target port:", UDP_PORT) 
        print ("message:", MESSAGE) 

        message_bytes = str.encode(MESSAGE) 
        sock = socket.socket(socket.AF_INET6, # Internet
                            socket.SOCK_DGRAM) # UDP
        sock.sendto(message_bytes, (UDP_IP, UDP_PORT))
        sock.sendto(message_bytes, (UDP_IP1, UDP_PORT))
        sock.sendto(message_bytes, (UDP_IP2, UDP_PORT))
        sock.sendto(message_bytes, (UDP_IP3, UDP_PORT))
        while True:
            
            sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
            sock.bind((HOST_IP, PORT))
            data, addr = sock.recvfrom(2048) # buffer size is 2048 bytes
            print ("received message:", data)
def lights_off():
    while True:
        MESSAGE = ".alloff"

        print ("UDP target IP:", UDP_IP) 
        print ("UDP target port:", UDP_PORT) 
        print ("message:", MESSAGE) 

        message_bytes = str.encode(MESSAGE) 
        sock = socket.socket(socket.AF_INET6, # Internet
                            socket.SOCK_DGRAM) # UDP
        sock.sendto(message_bytes, (UDP_IP, UDP_PORT))
        sock.sendto(message_bytes, (UDP_IP1, UDP_PORT))
        sock.sendto(message_bytes, (UDP_IP2, UDP_PORT))
        sock.sendto(message_bytes, (UDP_IP3, UDP_PORT))
        while True:
            
            sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
            sock.bind((HOST_IP, PORT))
            data, addr = sock.recvfrom(2048) # buffer size is 2048 bytes
            print ("received message:", data)
schedule.every().day.at("18:45").do(lights_on)
schedule.every().day.at("06:00").do(lights_off)

while True:
    schedule.run_pending()
    time.sleep(1)
